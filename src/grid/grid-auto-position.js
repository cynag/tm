export class GridAutoPosition {
  /**
   * Tenta posicionar item novo no invent√°rio.
   * 1. Tenta em p√© (original)
   * 2. Tenta rotacionado
   * 3. Se nenhum couber, cancela e avisa
   */
static async placeNewItem(actor, item) {
  const noStack = item.flags?.tm?.noAutoStack === true;
if (!noStack && await game.tm.GridUtils.tryStackItem(actor, item)) return;


  if (["trait", "language"].includes(item.type)) {
    console.warn(`[GridAutoPosition] ‚õî Ignorado tipo n√£o f√≠sico: ${item.type}`);
    return;
  }


    const rawW = item.system.grid?.w ?? 1;
    const rawH = item.system.grid?.h ?? 1;

    const grid = game.tm.GridUtils.createVirtualGrid(actor);

    // 1Ô∏è‚É£ Tenta original (em p√©)
    for (let x = 0; x < game.tm.GridUtils.GRID_WIDTH; x++) {
      for (let y = 0; y < game.tm.GridUtils.GRID_HEIGHT; y++) {
        if (game.tm.GridUtils.isSpaceFree(grid, x, y, rawW, rawH)) {
          console.log("[GridAutoPosition] ‚úÖ Colocado original em", x, y);
          game.tm.GridPositioner.placeItem(actor, item, x, y, false);
          return;
        }
      }
    }

    // 2Ô∏è‚É£ Tenta rotacionado
    for (let x = 0; x < game.tm.GridUtils.GRID_WIDTH; x++) {
      for (let y = 0; y < game.tm.GridUtils.GRID_HEIGHT; y++) {
        if (game.tm.GridUtils.isSpaceFree(grid, x, y, rawH, rawW)) {
          console.log("[GridAutoPosition] üîÅ Colocado rotacionado em", x, y);
          game.tm.GridPositioner.placeItem(actor, item, x, y, true);
          return;
        }
      }
    }

    // 3Ô∏è‚É£ Nenhuma posi√ß√£o poss√≠vel
    ui.notifications.warn("Sem espa√ßos no invent√°rio!");
    console.warn("[GridAutoPosition] ‚ùå Nenhum espa√ßo dispon√≠vel para", item.name);
  }
}
